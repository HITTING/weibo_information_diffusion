{
  "name": "jsnetworkx",
  "version": "0.3.3",
  "description": "A graph processing and visualization library for JavaScript (port of NetworkX for Python).",
  "license": "BSD-3-Clause",
  "keywords": [
    "jsnetworkx",
    "graph",
    "visualization",
    "science"
  ],
  "homepage": "http://felix-kling.de/JSNetworkX/",
  "repository": {
    "type": "git",
    "url": "https://github.com/fkling/JSNetworkX.git"
  },
  "bugs": {
    "url": "https://github.com/fkling/JSNetworkX/issues"
  },
  "author": {
    "name": "Felix Kling",
    "email": "felix.kling@gmx.net",
    "url": "http://jsnetworkx.org/"
  },
  "main": "node/index.js",
  "dependencies": {
    "babel-runtime": "^5",
    "lodash": "^3.3.1",
    "through": "^2.3.6",
    "tiny-sprintf": "^0.3.0"
  },
  "devDependencies": {
    "babel-core": "^5",
    "babel-eslint": "^3",
    "browserify": "^9.0.3",
    "chai": "^2.1.0",
    "chai-as-promised": "^4.1.1",
    "chai-checkmark": "^1.0.1",
    "chai-members-deep": "0.0.1",
    "commoner": "^0.10.1",
    "d3": "^3.5.3",
    "eslint": "^0.19.0",
    "istanbul": "^0.3.5",
    "mocha": "^2.0.1",
    "sinon": "^1.11.1",
    "source-map-support": "^0.2.8",
    "uglify-js": "^2.4.16",
    "watchify": "^2.2.1"
  },
  "browser": {
    "./node/_internals/delegate.js": "./node/_internals/delegateToWorker.js",
    "./src/_internals/delegate.js": "./src/_internals/delegateToWorker.js"
  },
  "browserify": {
    "transform": [
      "./transforms/replace"
    ]
  },
  "scripts": {
    "prepublish": "npm run build:node",
    "clean": "rm -rf node/ jsnetworkx.js jsnetworkx-dev.js",
    "build:node": "rm -rf node/ && node scripts/build-node.js src/ node/",
    "build:node:dev": "rm -rf node/ && node scripts/build-node.js --dev src/ node/",
    "watch:node": "npm run build:node:dev -- -w",
    "build:browser": "(export JSNETWORKX_BUNDLE=jsnetworkx.js; npm run build:node && rm -f $JSNETWORKX_BUNDLE && browserify node/browser.js -s jsnx | uglifyjs -cmo $JSNETWORKX_BUNDLE)",
    "build:browser:dev": "(export JSNETWORKX_BUNDLE=jsnetworkx-dev.js; npm run build:node:dev && rm -f $JSNETWORKX_BUNDLE && NODE_ENV=dev browserify node/browser.js -ds jsnx > $JSNETWORKX_BUNDLE)",
    "watch:browser": "(export JSNETWORKX_BUNDLE=jsnetworkx-dev.js; rm -f $JSNETWORKX_BUNDLE && NODE_ENV=dev watchify src/browser.js -t ./transforms/es7 -vds jsnx -o $JSNETWORKX_BUNDLE)",
    "test": "npm run build:node:dev && mocha --ui exports -R progress -r './scripts/setup-testenv.js' `find node/ -name *-test.js`",
    "test:fast": "mocha --ui exports -R progress -r './scripts/setup-testenv.js' `find node/ -name *-test.js`",
    "watch:test": "npm test -- -b -w",
    "cover": "npm run build:node && istanbul cover _mocha -x '**/__tests__/**' -x 'scripts/*' -x 'node/drawing/*' -- --ui exports -R progress -r './scripts/setup-testenv.js' `find node/ -name *-test.js`",
    "lint": "eslint src/"
  },
  "readme": "# JSNetworkX [![Build Status](https://travis-ci.org/fkling/JSNetworkX.svg?branch=es6_WIP)](https://travis-ci.org/fkling/JSNetworkX)\n\nJSNetworkX allows you to build, process and analyze graphs in JavaScript. It\ncan be used together with D3.js in the browser to create interactive graph\nvisualizations.\n\nIt is a port of [NetworkX](http://networkx.lanl.gov/) (v1.6), a\npopular graph library for Python, to JavaScript. Extensive information can\nbe found on:\n\n- the [website][]\n- the [API documentation][api]\n- the [wiki][]\n\n## Install\n\n### Node.js\n\nInstall from [npm][]:\n\n```\nnpm install jsnetworkx\n```\n\n### Browser\n\nDownload [jsnetworkx.js](./jsnetworkx.js) and include it in your page with\n\n```\n<script src=\"/path/to/jsnetworkx.js\"></script>\n```\n\nThis will create the global variable `jsnx`, with which all functions can be\naccessed.\n\n## Usage\n\nJSNetworkX consists of multiple parts which work closely together:\n\n- Graph classes (`Graph`, `DiGraph`, `MultiGraph` and `MultiDiGraph`) to model\n  the data\n- Graph generators for common graphs\n- Various graph algorithms\n- Graph visualization (in the browser)\n\nMost classes and functions are available on the root object (`jsnx` in\nbrowsers, `require('jsnetworkx')` in Node).\n\nInformation about which algorithms are available and the API of the classes,\ncan be found in the auto-generated [API documentation][api].\n\n### Example\n\n```js\n// var jsnx = require('jsnetworkx'); // in Node\n\n// a tree of height 4 with fan-out 2\nvar G = jsnx.balancedTree(2, 4);\n\n// Compute the shortest path between node 2 and 7\nvar path = jsnx.bidirectionalShortestPath(G, 2, 7);\n// [ 2, 0, 1, 3, 7 ]\n\n// or asynchronously\njsnx.genBidirectionalShortestPath(G, 2, 7).then(function(path) {\n  // path = [ 2, 0, 1, 3, 7 ]\n});\n```\n\nMore examples can we found on the [website][].\n\n### Asynchronous computation\n\nAll the algorithms are implemented in a synchronous fashion (for now at least).\nHowever, many algorithms are also available as asynchronous version. Their\nnames are `gen<SyncFunctionName>` (see example above) and they return a\nPromise.\n\nThis is achieved in **browsers** by creating a [WebWorker][]. The WebWorker has\nto be passed the path to the `jsnetworkx.js` file. You have to set the path\nexplicitly if the file is not located at the root:\n\n```js\njsnx.workerPath = '/path/to/jsnetworkx.js';\n```\n\nIn **Node**, a subprocess will be spawned (no setup is required).\n\n**Caveat:** In both cases the input data has to be serialized before it can be\nsent to the worker or subprocess. However, not every value can be serialized, in\nwhich case JSNetworkX will use the synchronous version instead. If you\nencounter a situation where a value is not serialized, but it should be\nserializable, please file an [issue][].\n\n\n### Iterables\n\nMany methods return generators or Maps. In an ES2015 environment, these can be\neasily consumed with a [`for/of`][forof] loop or [`Array.from`][arrayfrom].\n\nIf those are not available to you, JSNetworkX provides two helper methods for\niterating iterables and converting them to arrays: `jsnx.forEach` and\n`jsnx.toArray`\n\n---\n\n## How to contribute\n\nYou can contribute by:\n\n- Porting code from Python\n- Improving the documentation/website\n\nIf you plan on converting/porting a specific part, please create an issue\nbeforehand.\n\n### Build JSNetworkX\n\nJSNetworkX is written in ES2015 (ES6) and [Babel][] is used to convert it to\nES5. For the browser, all modules are bundled together with [browserify][].\n\nTo build JSNetworkX, all dependencies have to be installed via\n\n    npm install\n\n#### Build for the browser\n\n    npm run build:browser\n\ncreates `jsnetworkx.js`,  a minified version for production.\n\n    npm run build:browser:dev\n    npm run watch:browser\n\nCreates `jsnetworkx-dev.js`, an unminified version with inline source maps for\ndevelopment. The second version automatically rebuilds the file on change.\n\n#### Build for Node\n\n    npm run build:node\n\nTransforms all modules to ES5 and saves them inside the `node/` directory.\n\n    npm run build:node:dev\n\nSame as above but with inline source maps. These modules are also used to tun\nthe unit tests.\n\n    npm run watch:node\n\nIncrementally transform modules when files change.\n\n### Create and run tests\n\nTests are stored in the respective `__tests__` directories and have to follow\nthe naming convention `<testname>-test.js`. The tests can be run with\n\n    npm test\n    # or\n    npm run test:fast # if you also run `npm run watch:node`\n\nThis will run all tests by default. To consider only those files whose path\nmatches a specific string, pass the `-g` option:\n\n    # Runs all digraph tests but no graph tests\n    npm run test:fast -- -g digraph\n\nThe difference between `npm test` and `npm run test:fast` is that the former\nwill always transplile all files from ES6 to ES5 first. This is slow and\nannoying during development. Therefore you can use\n\n    npm run watch:node\n\nto automatically convert only the changed file and run `npm run test:fast` to\nquickly test them.\n\nIdeally, every module has corresponding unit test. If you port a module from\nNetworkX, make sure to implement the same tests.\n\n### Run coverage\n\nWe use [istanbul][] to generate a coverage report. We are not enforcing any coverage\nyet, but there should not be a regression. The report can be created via\n\n    npm run cover\n\nand written to `coverage/`.\n\n\n[issue]: https://github.com/fkling/JSNetworkX/issues\n[npm]: https://www.npmjs.com/\n[website]: http://jsnetworkx.org\n[api]: http://jsnetworkx.org/api/\n[wiki]: https://github.com/fkling/JSNetworkX/wiki\n[WebWorker]: https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\n[Babel]: https://babeljs.io/\n[browserify]: http://browserify.org/\n[istanbul]: https://gotwarlost.github.io/istanbul/\n[forof]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\n[arrayfrom]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\n",
  "readmeFilename": "README.md",
  "_id": "jsnetworkx@0.3.3",
  "dist": {
    "shasum": "23a7ce40a6cd37f1b7b69447a828aeff0d0a3ba4"
  },
  "_from": "jsnetworkx@",
  "_resolved": "https://registry.npmjs.org/jsnetworkx/-/jsnetworkx-0.3.3.tgz"
}
